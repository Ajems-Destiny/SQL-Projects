-- Create another table as working with original table is not advised
SELECT *
FROM layoffs;
CREATE TABLE layoffs_staging
LIKE layoffs;

-- Viewing the colums of the created table.
SELECT *
FROM layoffs_staging;

-- Inserting the content in layoffs table to layoffs_staging table
INSERT layoffs_staging
SELECT * 
FROM layoffs;


-- Removing Duplicates
SELECT *, ROW_NUMBER()
OVER(PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) Row_num
FROM layoffs_staging;

-- Creating a CTE in order to identify the duplicates 
WITH duplicate_CTE AS
(SELECT *, ROW_NUMBER()
OVER(PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) Row_num
FROM layoffs_staging)
SELECT * 
FROM duplicate_CTE
WHERE Row_num > 1;

-- Creating another table because we can not update our table using a CTE
CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Viewing the recently created table (layoffs_staging2)
SELECT * 
FROM layoffs_staging2;

-- Inserting into the recently created table (layoffs_staging2)
INSERT INTO layoffs_staging2
SELECT *, ROW_NUMBER()
OVER(PARTITION BY company,location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) Row_num
FROM layoffs_staging;

-- Deleting duplicates
DELETE 
FROM layoffs_staging2
WHERE row_num > 1;

-- Viewing the table after deleting duplicates
SELECT *
FROM layoffs_staging2;

-- Standardizing data
-- Trimming to remove all white spaces
SELECT company, TRIM(company)
FROM layoffs_staging2;

-- Updating the table with white spaces (removing the white spaces)
UPDATE layoffs_staging2
SET company = TRIM(company);

-- Viewing the updated table
SELECT *
FROM layoffs_staging2
ORDER BY industry;

-- Checking for disperity in industry column
SELECT distinct industry
FROM layoffs_staging2
ORDER BY 1;
--  Standardizing the industry column

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';
-- Checking for disperity in country column

SELECT distinct country
FROM layoffs_staging2
ORDER BY 1;
--  Standardizing the country column

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';
-- Viewing the updated table

SELECT distinct country
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y')
; 


ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE; 
-- Removing or populating nulls

-- Replacing all empty fields with nulls

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = ' ';
-- Joining table 1 and 2 on location and company in preparation to populate

SELECT *
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
	ON t1.industry = t2.industry
WHERE t1.industry IS NULL OR t1.industry = ' '
AND t2.industry IS NOT NULL ;
-- Updating the table as its being populated

UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
	ON t1.industry = t2.industry
    AND t1.location = t2.location
SET t1.industry = t2.industry
WHERE t1.industry IS NULL OR t1.industry = ' '
AND t2.industry IS NOT NULL ;

-- Removing unnecessary rows and columns

-- deleting tables with total_laid_off and percentage_laid_off is null as they can not be used for analysis
DELETE 
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- droping the row_num table as it is not necessary
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

-- viewing altered table after removing unnecessary rows and columns
SELECT * 
FROM layoffs_staging2;
